#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<ctype.h>//isdigit  isalpha
#define MAXN 20//接收字符最多数量 

typedef struct treenode *Tree;
typedef struct treenode *Node;
typedef struct treenode *ptr;

typedef struct treenode{
	char data;
	ptr left;
	ptr right;
	int flag;//判断该节点是否有被操作数插满 
};

//表达式树功能 
void ReadExpr(Tree);//输入前缀表达式 
void WriteExpr();//输出中缀表达式


void InsertNode(Tree,char);//插入节点 
void issym(char);//是操作符 
void isoper(char);//是操作数 

//化简代码 


int main()//ui 用switch搞 
{
	printf("欢迎使用表达式树\n");
	Tree tree;
	tree = NULL;
	ReadExpr(tree);
	return 0;
}

void issym(char c)//是操作符 
{
	if(c == '+' || c == '-' || c == '*' || c == '/' || c == '^')
	{
		return 1;
	}else
	{
		return 0;
	}
}

void isoper(char c)//是操作数 a~z 
{
	if(isdigit(c) || isalpha(c))
	{
		return 1;
	}else{
		return 0;
	}
 } 

void ReadExpr(Tree tree)//把代码分割开，不要搞一个超大得函数 
{
	printf("请输入前缀表达式:\n");
	char c;
	while((c = getchar()) != '\n')
	{
		if(tree == NULL)
		{
			Node node = (Node)malloc(sizeof(treenode));
			tree = node;
			tree->data = c;
			tree->left = NULL;
			tree->right = NULL;
		}
		else
		{
			InsertNode(tree,c)
		}
	 } 
}

void InsertNode(Tree tree,char c)
{
	Node temp = tree;
	if(isoper(c))//是操作数  
	{
		while(temp != NULL)
		{
			if(temp->left == NULL)
			{
				Node node = (Node)malloc(sizeof(treenode));
				temp->left = node;
				temp = temp->left;
				temp->data = c;
				temp->flag = 1;
				temp->left = NULL;
				temp->right = NULL;
				break;
			}
			else if(isoper(temp->left->data))//左子树是操作数
			{
				if(temp->right == NULL)//情况2 
				{
					Node node = (Node)malloc(sizeof(treenode));
					temp->flag = 1;
					temp->right = node;
					temp = temp->right;
					temp->data = c;
					temp->flag = 1;
					temp->left = NULL;
					temp->right = NULL;
					break; 
				}
				else if(issym(temp->right->data))//情况4 右子树是操作符
				{
					if(temp->right->flag == 1)//右子树插满了
					{
						temp->flag = 1;
						temp = tree;//还没插,走入死胡同了，从新来 
					}
					else{
						temp = temp->right;//往右深一层 
					}
					 
				 }
				 else if(isoper(temp->right->data))//情况5 右子树是操作数
				 {
				 	temp->flag = 1;
				 	temp = tree;//重新来,走入死胡同 
				  } 
			}
		}
	}else if(issymbol(c))
	{
		
	}
}
