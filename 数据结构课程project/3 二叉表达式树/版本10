#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<ctype.h>//isdigit  isalpha
#define MAXN 20//接收字符最多数量 

typedef struct treenode *Tree;
typedef struct treenode *Node;
typedef struct treenode *ptr;

typedef struct treenode{
	char data;
	ptr left;
	ptr right;
	int flag;//判断该节点是否有被操作数插满 
};

struct stackrecord;
typedef struct stackrecord *Stack;

struct stackrecord{
	char arr[MAXN];
	int topidx;
};

//表达式树功能 
int ReadExpr(Tree);//输入前缀表达式 
void WriteExpr(Tree);//输出中缀表达式
void Assign(char,char,Tree);//实现对变量V的赋值 v = c
void Value(char*,Stack,Tree,int);//对表达式求值 即输出表达式化简过的那种
void CompoundExpr(char,Tree,Tree);//构成新表达式 (E1)P(E2)  增加一个新节点两个表达式树 


void InsertNode(Tree,char);//插入节点
void PreOrder(Tree);//先序遍历
void MidOrder(Tree);//中序遍历 
void BackOrder(Tree,char*);//后序遍历 同时返回字符数量 
//void 

int issym(char);//是操作符 
int isoper(char);//是操作数 

//栈的实现函数
Stack CreateStack(int);//创建列表
void Push(char,Stack);
void Pop(Stack);
char Top(Stack);
int IsEmpty(Stack); 

//化简代码 

// +*5^x2*8x
// +*3^*3^x2x6
int main()//ui 用switch搞 
{
	printf("欢迎使用表达式树\n");
	
	Tree tree;
	char c = getchar();
	Node node = (Node)malloc(sizeof(treenode));
	tree = node;
	tree->data = c;
	tree->left = NULL;
	tree->right = NULL;
	
	int num;
	char arr[MAXN];
	Stack S;
	S = CreateStack(MAXN);
	//创建栈， 
	
	printf("头节点已插入\n"); 
	num = ReadExpr(tree);//num是操作符数量
	printf("\n\n操作符数量 : %d \n\n",num); 
	
	printf("\n字符总数为:%d\n\n",num);
	
	printf("\npreorder\n");
	PreOrder(tree);
	
	
	printf("\nbackorder\n");
	BackOrder(tree,arr);//把后缀表达式存入数组 数组中一共num个字符

	
	printf("\nWriteExpr\n");
	WriteExpr(tree);
	
	//value部分
	char c1,c2;
	//printf("\n\n请输入 待替换的字符 和 新字符\n");
	//scanf("%c %c",&c1,&c2);
	//Assign(c1,c2,tree); 
	
	printf("\nnew WriteExpr\n");
	WriteExpr(tree);
	
 
	Value(arr,S,tree,num);//求值函数 num是操作符数量 
	return 0;
}

int issym(char c)//是操作符 
{
	if(c == '+' || c == '-' || c == '*' || c == '/' || c == '^')
	{
		return 1;
	}else
	{
		return 0;
	}
}

int isoper(char c)//是操作数 a~z 
{
	if(isdigit(c) || isalpha(c))
	{
		return 1;
	}else{
		return 0;
	}
 } 

int ReadExpr(Tree tree)//把代码分割开，不要搞一个超大得函数 
{
	printf("请输入前缀表达式:\n");
	char c;
	int num = 1;
	while((c = getchar()) != '\n')
	{
			printf("insert\n");
			InsertNode(tree,c);
			printf("!!!!执行完一次插入\n\n");
			num++;
	}
	return num; 
}

void InsertNode(Tree tree,char c)
{
	Node temp = tree;
	if(isoper(c))//是操作数  
	{
		while(temp != NULL)
		{
			printf("\n操作数\n\n");
			if(temp->left == NULL)//如果指针是NULL就检查flag的话就会有error 
			{
				printf("左边NULL\n");
				Node node = (Node)malloc(sizeof(treenode));
				temp->left = node;
				temp = temp->left;
				temp->data = c;
				temp->flag = 1;
				temp->left = NULL;
				temp->right = NULL;
				break;
			}
			else if(temp->left->flag == 1)//左子树是操作数或者左子树完全插满 情况 2 4 5 
			{
				if(temp->right == NULL)//情况2 
				{
					printf("插入右边\n"); 
					Node node = (Node)malloc(sizeof(treenode));
					temp->right = node;
					temp->flag = 1;
					temp = temp->right;
					temp->data = c;
					temp->flag = 1;
					temp->left = NULL;
					temp->right = NULL;
					break; 
				}
				else if(temp->right->flag == 1) //左右子树都插满了，回树根重新开始
				{
					temp->flag = 1;
					temp = tree;
					printf("左右都已插满");
					continue;
				} 
				else if(issym(temp->right->data))//情况4 右子树是操作符
				{
					printf("往右深处走一层\n");
					temp = temp->right;//往右深处走一层  不用考虑右边也插满的情况 
			    }
			}
			else if(issym(temp->left->data))//情况3 左子树是还没插满得操作符
			{
				printf("往左深处走一层\n");
				temp = temp->left;
			}
     	}
	}
	else if(issym(c))//插入操作符 
	{
		while(temp != NULL)
		{
			printf("\n操作符\n\n");
			if(temp->left == NULL)//左边空 
			{
				printf("左边空 插入\n");
				Node node = (Node)malloc(sizeof(treenode));
				temp->left = node;
				temp = temp->left;//插入操作符不需要把flag置为1 
				temp->data = c;
				temp->left = NULL;
				temp->right = NULL;
				break;
			}
			else if(temp->left->flag == 1)//左边已经插满 
			{
				printf("左边已经插满\n");
				if(temp->right == NULL)//右边是空的 
				{
					printf("插入右边\n");
					Node node = (Node)malloc(sizeof(treenode)); 
					temp->right = node;
					temp = temp->right;
					temp->data = c;
					temp->left = NULL;
					temp->right = NULL;
					break; 
			    }
				else if(temp->right->flag == 1)
			    {
			    	temp->flag = 1;
					temp = tree;
					printf("左右都插满");
					continue;
			    }
				else if(issym(temp->right->data))//右边是操作符 
				{
					printf("右边更深一层\n");
			    	temp = temp->right;
				 } 
			}
			else if(issym(temp->left->data))//左边是操作符 
			{
				printf("往左深处走一层\n");
				temp = temp->left;
			}
		} 
	}
}
/*
void WriteExpr(Tree tree)//输出中序表达式 
{
	
}
*/

void PreOrder(Tree tree)
{	
	if(tree != NULL)
	{
		printf(" %c(%d) ",tree->data,tree->flag);
		PreOrder(tree->left);
		PreOrder(tree->right);
	}
}

void MidOrder(Tree tree)
{
	if(tree != NULL)
	{
		if(isoper(tree->data))
		{
			MidOrder(tree->left);
			printf(" %c ",tree->data);
			MidOrder(tree->right);
		}
		else
		{
			printf("(");
			MidOrder(tree->left);
			printf(" %c ",tree->data);
			MidOrder(tree->right);
			printf(")");
		}
	}
}

void WriteExpr(Tree tree)
{
	MidOrder(tree);	
}

int n = 0;

void BackOrder(Tree tree,char arr[])
{
	if(tree != NULL)
	{
		BackOrder(tree->left,arr);
		BackOrder(tree->right,arr);
		printf(" %c ",tree->data);
		arr[n++] = tree->data;
	}
}

void Assign(char c,char v,Tree tree)
{
	if(tree != NULL)
	{
		if(tree->data == c)
			tree->data = v;
		Assign(c,v,tree->left);
		Assign(c,v,tree->right);
	}
}

Stack CreateStack(int num)
{
	Stack S;
	S = (Stack)malloc(sizeof(struct stackrecord));
	//S->arr = (Stack->arr)malloc(sizeof(char)*num);
	S->topidx = -1;
	return S;
}

void Push(char c,Stack S)
{
	S->arr[++S->topidx] = c;
}

void Pop(Stack S)
{
	S->topidx--;
}

char Top(Stack S)
{
	if(!IsEmpty(S))
		return S->arr[S->topidx];
	printf("\n\nEROOR ERROR\n\n");
}

int IsEmpty(Stack S)
{
	return S->topidx == -1;
}

void Value(char arr[],Stack S,Tree tree,int num)
{
	for(int i=0;i<num;i++)
	{
		if(isalpha(arr[i]))
		{
			printf("\n表达式无法求值，有字母存在！\n\n");
			break;
		}
	}
	
	Push(arr[0],S);//测试是否能用，结果真的可以用 
	printf(" \n\n !!! %c \n\n",Top(S));
	//for(int i=0;i<num;i++)
}

